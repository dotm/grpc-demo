// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: services/demo/demo.proto

package demo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DemoClient is the client API for Demo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoClient interface {
	SimpleUnaryMethod(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error)
	ServerStreamingMethod(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (Demo_ServerStreamingMethodClient, error)
	ClientStreamingMethod(ctx context.Context, opts ...grpc.CallOption) (Demo_ClientStreamingMethodClient, error)
	BidirectionalStreamingMethod(ctx context.Context, opts ...grpc.CallOption) (Demo_BidirectionalStreamingMethodClient, error)
}

type demoClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoClient(cc grpc.ClientConnInterface) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) SimpleUnaryMethod(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error) {
	out := new(DemoResponse)
	err := c.cc.Invoke(ctx, "/github.dotm.demo.Demo/SimpleUnaryMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) ServerStreamingMethod(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (Demo_ServerStreamingMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[0], "/github.dotm.demo.Demo/ServerStreamingMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoServerStreamingMethodClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Demo_ServerStreamingMethodClient interface {
	Recv() (*DemoResponse, error)
	grpc.ClientStream
}

type demoServerStreamingMethodClient struct {
	grpc.ClientStream
}

func (x *demoServerStreamingMethodClient) Recv() (*DemoResponse, error) {
	m := new(DemoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoClient) ClientStreamingMethod(ctx context.Context, opts ...grpc.CallOption) (Demo_ClientStreamingMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[1], "/github.dotm.demo.Demo/ClientStreamingMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoClientStreamingMethodClient{stream}
	return x, nil
}

type Demo_ClientStreamingMethodClient interface {
	Send(*DemoRequest) error
	CloseAndRecv() (*DemoResponse, error)
	grpc.ClientStream
}

type demoClientStreamingMethodClient struct {
	grpc.ClientStream
}

func (x *demoClientStreamingMethodClient) Send(m *DemoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoClientStreamingMethodClient) CloseAndRecv() (*DemoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DemoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoClient) BidirectionalStreamingMethod(ctx context.Context, opts ...grpc.CallOption) (Demo_BidirectionalStreamingMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[2], "/github.dotm.demo.Demo/BidirectionalStreamingMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoBidirectionalStreamingMethodClient{stream}
	return x, nil
}

type Demo_BidirectionalStreamingMethodClient interface {
	Send(*DemoRequest) error
	Recv() (*DemoResponse, error)
	grpc.ClientStream
}

type demoBidirectionalStreamingMethodClient struct {
	grpc.ClientStream
}

func (x *demoBidirectionalStreamingMethodClient) Send(m *DemoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoBidirectionalStreamingMethodClient) Recv() (*DemoResponse, error) {
	m := new(DemoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoServer is the server API for Demo service.
// All implementations must embed UnimplementedDemoServer
// for forward compatibility
type DemoServer interface {
	SimpleUnaryMethod(context.Context, *DemoRequest) (*DemoResponse, error)
	ServerStreamingMethod(*DemoRequest, Demo_ServerStreamingMethodServer) error
	ClientStreamingMethod(Demo_ClientStreamingMethodServer) error
	BidirectionalStreamingMethod(Demo_BidirectionalStreamingMethodServer) error
	mustEmbedUnimplementedDemoServer()
}

// UnimplementedDemoServer must be embedded to have forward compatible implementations.
type UnimplementedDemoServer struct {
}

func (UnimplementedDemoServer) SimpleUnaryMethod(context.Context, *DemoRequest) (*DemoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleUnaryMethod not implemented")
}
func (UnimplementedDemoServer) ServerStreamingMethod(*DemoRequest, Demo_ServerStreamingMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingMethod not implemented")
}
func (UnimplementedDemoServer) ClientStreamingMethod(Demo_ClientStreamingMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingMethod not implemented")
}
func (UnimplementedDemoServer) BidirectionalStreamingMethod(Demo_BidirectionalStreamingMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingMethod not implemented")
}
func (UnimplementedDemoServer) mustEmbedUnimplementedDemoServer() {}

// UnsafeDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoServer will
// result in compilation errors.
type UnsafeDemoServer interface {
	mustEmbedUnimplementedDemoServer()
}

func RegisterDemoServer(s grpc.ServiceRegistrar, srv DemoServer) {
	s.RegisterService(&Demo_ServiceDesc, srv)
}

func _Demo_SimpleUnaryMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).SimpleUnaryMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.dotm.demo.Demo/SimpleUnaryMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).SimpleUnaryMethod(ctx, req.(*DemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_ServerStreamingMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DemoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoServer).ServerStreamingMethod(m, &demoServerStreamingMethodServer{stream})
}

type Demo_ServerStreamingMethodServer interface {
	Send(*DemoResponse) error
	grpc.ServerStream
}

type demoServerStreamingMethodServer struct {
	grpc.ServerStream
}

func (x *demoServerStreamingMethodServer) Send(m *DemoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Demo_ClientStreamingMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServer).ClientStreamingMethod(&demoClientStreamingMethodServer{stream})
}

type Demo_ClientStreamingMethodServer interface {
	SendAndClose(*DemoResponse) error
	Recv() (*DemoRequest, error)
	grpc.ServerStream
}

type demoClientStreamingMethodServer struct {
	grpc.ServerStream
}

func (x *demoClientStreamingMethodServer) SendAndClose(m *DemoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoClientStreamingMethodServer) Recv() (*DemoRequest, error) {
	m := new(DemoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Demo_BidirectionalStreamingMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServer).BidirectionalStreamingMethod(&demoBidirectionalStreamingMethodServer{stream})
}

type Demo_BidirectionalStreamingMethodServer interface {
	Send(*DemoResponse) error
	Recv() (*DemoRequest, error)
	grpc.ServerStream
}

type demoBidirectionalStreamingMethodServer struct {
	grpc.ServerStream
}

func (x *demoBidirectionalStreamingMethodServer) Send(m *DemoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoBidirectionalStreamingMethodServer) Recv() (*DemoRequest, error) {
	m := new(DemoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Demo_ServiceDesc is the grpc.ServiceDesc for Demo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Demo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.dotm.demo.Demo",
	HandlerType: (*DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleUnaryMethod",
			Handler:    _Demo_SimpleUnaryMethod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingMethod",
			Handler:       _Demo_ServerStreamingMethod_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingMethod",
			Handler:       _Demo_ClientStreamingMethod_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingMethod",
			Handler:       _Demo_BidirectionalStreamingMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services/demo/demo.proto",
}
